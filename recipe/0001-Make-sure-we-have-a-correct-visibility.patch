From 4f3b726a0b6b869bc92479e4fdb7858083b6442c Mon Sep 17 00:00:00 2001
From: Romain Thomas <me@romainthomas.fr>
Date: Sat, 5 Oct 2024 05:49:38 +0200
Subject: [PATCH] Make sure we have a correct visibility

---
 api/python/CMakeLists.txt                                  | 6 +++++-
 cmake/LIEFOptions.cmake                                    | 4 ++++
 include/LIEF/Abstract/DebugInfo.hpp                        | 3 ++-
 include/LIEF/BinaryStream/BinaryStream.hpp                 | 3 ++-
 include/LIEF/BinaryStream/FileStream.hpp                   | 4 +++-
 include/LIEF/BinaryStream/MemoryStream.hpp                 | 3 ++-
 include/LIEF/BinaryStream/SpanStream.hpp                   | 3 ++-
 include/LIEF/BinaryStream/VectorStream.hpp                 | 3 ++-
 include/LIEF/DWARF/Function.hpp                            | 2 +-
 include/LIEF/DWARF/types/ClassLike.hpp                     | 2 +-
 include/LIEF/ELF/NoteDetails/NoteGnuProperty.hpp           | 2 +-
 include/LIEF/ELF/NoteDetails/properties/AArch64Feature.hpp | 3 ++-
 include/LIEF/ELF/NoteDetails/properties/StackSize.hpp      | 3 ++-
 include/LIEF/ELF/NoteDetails/properties/X86Feature.hpp     | 3 ++-
 include/LIEF/ELF/NoteDetails/properties/X86ISA.hpp         | 3 ++-
 include/LIEF/MachO/LoadCommand.hpp                         | 2 +-
 include/LIEF/PE/signature/PKCS9TSTInfo.hpp                 | 3 ++-
 include/LIEF/range.hpp                                     | 5 ++++-
 18 files changed, 40 insertions(+), 17 deletions(-)

diff --git a/api/python/CMakeLists.txt b/api/python/CMakeLists.txt
index daa3036..cd968a7 100644
--- a/api/python/CMakeLists.txt
+++ b/api/python/CMakeLists.txt
@@ -1,7 +1,11 @@
 find_package(Python REQUIRED COMPONENTS Interpreter Development.Module)
 
 if (LIEF_PY_LIEF_EXT)
-  find_package(LIEF REQUIRED COMPONENTS STATIC)
+  if (LIEF_PY_LIEF_EXT_SHARED)
+    find_package(LIEF REQUIRED COMPONENTS SHARED)
+  else()
+    find_package(LIEF REQUIRED COMPONENTS STATIC)
+  endif()
   message(STATUS "Using pre-installed version of LIEF")
   set(LIEF_TARGET LIEF::LIEF)
   set_target_properties(LIB_LIEF PROPERTIES EXCLUDE_FROM_ALL ON)
diff --git a/cmake/LIEFOptions.cmake b/cmake/LIEFOptions.cmake
index 6c95216..1f1b0fd 100644
--- a/cmake/LIEFOptions.cmake
+++ b/cmake/LIEFOptions.cmake
@@ -37,6 +37,10 @@ option(LIEF_OBJC           "Build LIEF with ObjC metadata support"      OFF)
 cmake_dependent_option(LIEF_PYTHON_EDITABLE "Make an editable build " OFF
                        "LIEF_PYTHON_API" OFF)
 
+cmake_dependent_option(LIEF_PY_LIEF_EXT_SHARED
+                      "Use a 'SHARED' version of LIEF instead of a static one" OFF
+                       "LIEF_PY_LIEF_EXT" OFF)
+
 cmake_dependent_option(LIEF_PYTHON_STATIC "Internal usage" OFF
                        "LIEF_PYTHON_API" OFF)
 
diff --git a/include/LIEF/Abstract/DebugInfo.hpp b/include/LIEF/Abstract/DebugInfo.hpp
index b62ecd2..43df7ef 100644
--- a/include/LIEF/Abstract/DebugInfo.hpp
+++ b/include/LIEF/Abstract/DebugInfo.hpp
@@ -15,13 +15,14 @@
 #ifndef LIEF_DEBUGINFO_H
 #define LIEF_DEBUGINFO_H
 #include <memory>
+#include "LIEF/visibility.h"
 namespace LIEF {
 
 namespace details {
 class DebugInfo;
 }
 
-class DebugInfo {
+class LIEF_API DebugInfo {
   public:
   enum class FORMAT {
     UNKNOWN = 0,
diff --git a/include/LIEF/BinaryStream/BinaryStream.hpp b/include/LIEF/BinaryStream/BinaryStream.hpp
index 3a64607..e76f4b6 100644
--- a/include/LIEF/BinaryStream/BinaryStream.hpp
+++ b/include/LIEF/BinaryStream/BinaryStream.hpp
@@ -26,12 +26,13 @@
 
 #include "LIEF/BinaryStream/Convert.hpp"
 #include "LIEF/errors.hpp"
+#include "LIEF/visibility.h"
 
 namespace LIEF {
 class ASN1Reader;
 
 //! Class that is used to a read stream of data from different sources
-class BinaryStream {
+class LIEF_API BinaryStream {
   public:
   friend class ASN1Reader;
 
diff --git a/include/LIEF/BinaryStream/FileStream.hpp b/include/LIEF/BinaryStream/FileStream.hpp
index 9041bae..195aaa1 100644
--- a/include/LIEF/BinaryStream/FileStream.hpp
+++ b/include/LIEF/BinaryStream/FileStream.hpp
@@ -22,10 +22,12 @@
 
 #include "LIEF/errors.hpp"
 #include "LIEF/BinaryStream/BinaryStream.hpp"
+#include "LIEF/visibility.h"
+
 namespace LIEF {
 
 //! Stream interface over a std::ifstream
-class FileStream : public BinaryStream {
+class LIEF_API FileStream : public BinaryStream {
   public:
   static result<FileStream> from_file(const std::string& file);
   FileStream(std::ifstream fs, uint64_t size) :
diff --git a/include/LIEF/BinaryStream/MemoryStream.hpp b/include/LIEF/BinaryStream/MemoryStream.hpp
index fd53dbd..8790604 100644
--- a/include/LIEF/BinaryStream/MemoryStream.hpp
+++ b/include/LIEF/BinaryStream/MemoryStream.hpp
@@ -19,11 +19,12 @@
 #include <cstdint>
 
 #include "LIEF/errors.hpp"
+#include "LIEF/visibility.h"
 #include "LIEF/BinaryStream/BinaryStream.hpp"
 
 namespace LIEF {
 class Binary;
-class MemoryStream : public BinaryStream {
+class LIEF_API MemoryStream : public BinaryStream {
   public:
   using BinaryStream::p;
   using BinaryStream::end;
diff --git a/include/LIEF/BinaryStream/SpanStream.hpp b/include/LIEF/BinaryStream/SpanStream.hpp
index f3a44f3..e91eadb 100644
--- a/include/LIEF/BinaryStream/SpanStream.hpp
+++ b/include/LIEF/BinaryStream/SpanStream.hpp
@@ -23,10 +23,11 @@
 
 #include "LIEF/errors.hpp"
 #include "LIEF/span.hpp"
+#include "LIEF/visibility.h"
 #include "LIEF/BinaryStream/BinaryStream.hpp"
 
 namespace LIEF {
-class SpanStream : public BinaryStream {
+class LIEF_API SpanStream : public BinaryStream {
   public:
   using BinaryStream::p;
   using BinaryStream::end;
diff --git a/include/LIEF/BinaryStream/VectorStream.hpp b/include/LIEF/BinaryStream/VectorStream.hpp
index e892a3a..61b885c 100644
--- a/include/LIEF/BinaryStream/VectorStream.hpp
+++ b/include/LIEF/BinaryStream/VectorStream.hpp
@@ -20,10 +20,11 @@
 #include <string>
 
 #include "LIEF/errors.hpp"
+#include "LIEF/visibility.h"
 #include "LIEF/BinaryStream/BinaryStream.hpp"
 
 namespace LIEF {
-class VectorStream : public BinaryStream {
+class LIEF_API VectorStream : public BinaryStream {
   public:
   using BinaryStream::p;
   using BinaryStream::end;
diff --git a/include/LIEF/DWARF/Function.hpp b/include/LIEF/DWARF/Function.hpp
index 503959d..f6ee259 100644
--- a/include/LIEF/DWARF/Function.hpp
+++ b/include/LIEF/DWARF/Function.hpp
@@ -99,7 +99,7 @@ class LIEF_API Function {
   };
 
   /// This class wraps a DWARF function's parameter
-  class Parameter {
+  class LIEF_API Parameter {
     public:
     Parameter(std::unique_ptr<details::Parameter> impl);
     Parameter(Parameter&& other) noexcept;
diff --git a/include/LIEF/DWARF/types/ClassLike.hpp b/include/LIEF/DWARF/types/ClassLike.hpp
index 6ae8263..8e5ef25 100644
--- a/include/LIEF/DWARF/types/ClassLike.hpp
+++ b/include/LIEF/DWARF/types/ClassLike.hpp
@@ -33,7 +33,7 @@ class LIEF_API ClassLike : public Type {
   using Type::Type;
 
   /// This represents a class/struct/union attribute
-  class Member {
+  class LIEF_API Member {
     public:
     Member(std::unique_ptr<details::Member> impl);
     Member(Member&& other) noexcept;
diff --git a/include/LIEF/ELF/NoteDetails/NoteGnuProperty.hpp b/include/LIEF/ELF/NoteDetails/NoteGnuProperty.hpp
index 126b4fd..c6fca10 100644
--- a/include/LIEF/ELF/NoteDetails/NoteGnuProperty.hpp
+++ b/include/LIEF/ELF/NoteDetails/NoteGnuProperty.hpp
@@ -32,7 +32,7 @@ class LIEF_API NoteGnuProperty : public Note {
 
   /// This class wraps the different properties that can be used in a
   /// `NT_GNU_PROPERTY_TYPE_0` note
-  class Property {
+  class LIEF_API Property {
     public:
 
     /// LIEF's mirror types of the original `GNU_PROPERTY_` values
diff --git a/include/LIEF/ELF/NoteDetails/properties/AArch64Feature.hpp b/include/LIEF/ELF/NoteDetails/properties/AArch64Feature.hpp
index 0bc12a9..226ec70 100644
--- a/include/LIEF/ELF/NoteDetails/properties/AArch64Feature.hpp
+++ b/include/LIEF/ELF/NoteDetails/properties/AArch64Feature.hpp
@@ -16,6 +16,7 @@
 #ifndef LIEF_ELF_NOTE_DETAILS_PROPERTIES_AARCH64_FEATURE_H
 #define LIEF_ELF_NOTE_DETAILS_PROPERTIES_AARCH64_FEATURE_H
 
+#include "LIEF/visibility.h"
 #include "LIEF/ELF/NoteDetails/NoteGnuProperty.hpp"
 
 namespace LIEF {
@@ -24,7 +25,7 @@ class BinaryStream;
 namespace ELF {
 
 /// This class represents the `GNU_PROPERTY_AARCH64_FEATURE_1_AND` property.
-class AArch64Feature : public NoteGnuProperty::Property {
+class LIEF_API AArch64Feature : public NoteGnuProperty::Property {
   public:
   enum class FEATURE {
     UNKNOWN = 0,
diff --git a/include/LIEF/ELF/NoteDetails/properties/StackSize.hpp b/include/LIEF/ELF/NoteDetails/properties/StackSize.hpp
index 137bd38..a2e7b92 100644
--- a/include/LIEF/ELF/NoteDetails/properties/StackSize.hpp
+++ b/include/LIEF/ELF/NoteDetails/properties/StackSize.hpp
@@ -17,13 +17,14 @@
 #define LIEF_ELF_NOTE_DETAILS_PROPERTIES_STACK_SIZE_H
 
 #include "LIEF/ELF/NoteDetails/NoteGnuProperty.hpp"
+#include "LIEF/visibility.h"
 
 namespace LIEF {
 namespace ELF {
 /// This class provides an interface over the `GNU_PROPERTY_STACK_SIZE` property
 ///
 /// This property can be used by the loader to raise the stack limit.
-class StackSize : public NoteGnuProperty::Property {
+class LIEF_API StackSize : public NoteGnuProperty::Property {
   public:
   static bool classof(const NoteGnuProperty::Property* prop) {
     return prop->type() == NoteGnuProperty::Property::TYPE::STACK_SIZE;
diff --git a/include/LIEF/ELF/NoteDetails/properties/X86Feature.hpp b/include/LIEF/ELF/NoteDetails/properties/X86Feature.hpp
index 5a23078..f2fbeb4 100644
--- a/include/LIEF/ELF/NoteDetails/properties/X86Feature.hpp
+++ b/include/LIEF/ELF/NoteDetails/properties/X86Feature.hpp
@@ -19,6 +19,7 @@
 #include <utility>
 
 #include "LIEF/ELF/NoteDetails/NoteGnuProperty.hpp"
+#include "LIEF/visibility.h"
 
 namespace LIEF {
 namespace ELF {
@@ -28,7 +29,7 @@ namespace ELF {
 /// - ``GNU_PROPERTY_X86_FEATURE_1_AND``
 /// - ``GNU_PROPERTY_X86_FEATURE_2_USED``
 /// - ``GNU_PROPERTY_X86_FEATURE_2_NEEDED``
-class X86Features : public NoteGnuProperty::Property {
+class LIEF_API X86Features : public NoteGnuProperty::Property {
   public:
 
   /// Flag according to the ``_AND``, ``_USED`` or ``_NEEDED`` suffixes
diff --git a/include/LIEF/ELF/NoteDetails/properties/X86ISA.hpp b/include/LIEF/ELF/NoteDetails/properties/X86ISA.hpp
index 5f0d98d..0edd7d0 100644
--- a/include/LIEF/ELF/NoteDetails/properties/X86ISA.hpp
+++ b/include/LIEF/ELF/NoteDetails/properties/X86ISA.hpp
@@ -19,6 +19,7 @@
 #include <utility>
 
 #include "LIEF/ELF/NoteDetails/NoteGnuProperty.hpp"
+#include "LIEF/visibility.h"
 
 namespace LIEF {
 namespace ELF {
@@ -31,7 +32,7 @@ namespace ELF {
 /// - ``GNU_PROPERTY_X86_COMPAT_ISA_1_NEEDED``
 /// - ``GNU_PROPERTY_X86_COMPAT_2_ISA_1_USED``
 /// - ``GNU_PROPERTY_X86_COMPAT_2_ISA_1_NEEDED``
-class X86ISA : public NoteGnuProperty::Property {
+class LIEF_API X86ISA : public NoteGnuProperty::Property {
   public:
   enum class FLAG {
     NONE = 0,
diff --git a/include/LIEF/MachO/LoadCommand.hpp b/include/LIEF/MachO/LoadCommand.hpp
index e0bd642..3f89190 100644
--- a/include/LIEF/MachO/LoadCommand.hpp
+++ b/include/LIEF/MachO/LoadCommand.hpp
@@ -172,7 +172,7 @@ class LIEF_API LoadCommand : public Object {
   uint64_t command_offset_ = 0;
 };
 
-const char* to_string(LoadCommand::TYPE type);
+LIEF_API const char* to_string(LoadCommand::TYPE type);
 
 }
 }
diff --git a/include/LIEF/PE/signature/PKCS9TSTInfo.hpp b/include/LIEF/PE/signature/PKCS9TSTInfo.hpp
index 1bb3564..d200c89 100644
--- a/include/LIEF/PE/signature/PKCS9TSTInfo.hpp
+++ b/include/LIEF/PE/signature/PKCS9TSTInfo.hpp
@@ -19,6 +19,7 @@
 #include <memory>
 
 #include "LIEF/Visitor.hpp"
+#include "LIEF/visibility.h"
 #include "LIEF/PE/signature/ContentInfo.hpp"
 
 namespace LIEF {
@@ -55,7 +56,7 @@ namespace PE {
 //!   micros     [1] INTEGER  (1..999) OPTIONAL
 //! }
 //! ```
-class PKCS9TSTInfo : public ContentInfo::Content {
+class LIEF_API PKCS9TSTInfo : public ContentInfo::Content {
   friend class SignatureParser;
 
   public:
diff --git a/include/LIEF/range.hpp b/include/LIEF/range.hpp
index c66b520..ba5fa3f 100644
--- a/include/LIEF/range.hpp
+++ b/include/LIEF/range.hpp
@@ -17,6 +17,8 @@
 #include <cstdint>
 #include <ostream>
 
+#include "LIEF/visibility.h"
+
 namespace LIEF {
 struct range_t {
   uint64_t low = 0;
@@ -26,7 +28,8 @@ struct range_t {
     return high - low;
   }
 
-  friend std::ostream& operator<<(std::ostream& os, const range_t& range);
+  friend LIEF_API
+    std::ostream& operator<<(std::ostream& os, const range_t& range);
 };
 
 }
